using FluentNetBDD.Generation;
using FluentNetBDD.Generators;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace FluentNetBDD.Tests.Generating;

public class Generating_Basic_Dsl
{
    [Test]
    public void Joins_All_Interfaces_Per_Actor_And_Actors_To_Subjunctions()
    {
        var source =
            """
            using FluentNetBDD.Dsl;
            using FluentNetBDD.Generation;
            using FluentNetBDD.Tests.Dsl.UserFeatures;
            
            namespace FluentNetBDD.Tests.Generating;
            
            [GenerateDsl(
                "AgileNamedUser",
                givenTypes: [typeof(IUserWithName), typeof(IUserWithAgility)],
                whenTypes: [typeof(IUserGreetingAction), typeof(IUserAgilityActions)],
                thenTypes: [typeof(IUserGreetingVerification), typeof(IUserAgilityVerification)]
            )]
            
            public class JustSomethingToHangOnTo 
            {
            }
            """;

        var syntaxTree = CSharpSyntaxTree.ParseText(source);

        var references = AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
            .Select(a => MetadataReference.CreateFromFile(a.Location))
            .ToList();

        var attributeAssemblyPath = typeof(GenerateDslAttribute).Assembly.Location;
        references.Add(MetadataReference.CreateFromFile(attributeAssemblyPath));

        var compilation = CSharpCompilation.Create(
            "TestAssembly",
            [syntaxTree],
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary)
        );

        var generator = new DslGenerator();

        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator)
            .RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

        var generatedTrees = outputCompilation.SyntaxTrees.ToList();
        var dslSyntaxTree = generatedTrees.Last();
        var generatedSource = dslSyntaxTree.ToString();
        
        Console.WriteLine(generatedSource);

        Assert.That
        (
            generatedSource,
            Is.EqualTo
            (
            """
            using System;
            using FluentNetBDD.Dsl;
            using FluentNetBDD.Tests.Dsl.UserFeatures;
            
            namespace FluentNetBDD.Tests.Generating.Generated;
            
            // <auto-generated/>
            public interface IAgileNamedUserGivenUserDriver : IUserWithName, IUserWithAgility {}
            public interface IAgileNamedUserGivenDriver
            {
                IAgileNamedUserGivenUserDriver User { get; }
            }
            
            public interface IAgileNamedUserWhenUserDriver : IUserGreetingAction, IUserAgilityActions {}
            public interface IAgileNamedUserWhenDriver
            {
                IAgileNamedUserWhenUserDriver User { get; }
            }
            
            public interface IAgileNamedUserThenUserDriver : IUserGreetingVerification, IUserAgilityVerification {}
            public interface IAgileNamedUserThenDriver
            {
                IAgileNamedUserThenUserDriver User { get; }
            }
            
            public partial class AgileNamedUserDsl : Dsl<IAgileNamedUserGivenDriver, IAgileNamedUserWhenDriver, IAgileNamedUserThenDriver>
            {
                public AgileNamedUserDsl(IServiceProvider provider) : base(provider)
                {
                
                }
            }
            """
            )
        );
    }
}
