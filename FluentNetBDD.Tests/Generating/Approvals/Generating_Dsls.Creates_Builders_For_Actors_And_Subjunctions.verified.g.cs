// <auto-generated/>

using System;
using FluentNetBDD.Dsl;
using FluentNetBDD.Tests.Dsl.UserFeatures;
using System.Runtime.CompilerServices;
using FluentNetBDD.Dsl.Builders;

namespace FluentNetBDD.Tests.Generating.Generated;

#nullable enable

public interface IAgileNamedUserGivenUserDriver : IUserWithName, IUserWithAgility { }
public interface IAgileNamedUserGivenDriver
{
    IAgileNamedUserGivenUserDriver User { get; }
}

public interface IAgileNamedUserWhenUserDriver : IUserGreetingAction, IUserAgilityActions { }
public interface IAgileNamedUserWhenDriver
{
    IAgileNamedUserWhenUserDriver User { get; }
}

public interface IAgileNamedUserThenUserDriver : IUserGreetingVerification, IUserAgilityVerification { }
public interface IAgileNamedUserThenDriver
{
    IAgileNamedUserThenUserDriver User { get; }
}

public class AgileNamedUserGivenUserBuilder : DriverSequenceBuilderBase<AgileNamedUserGivenUserBuilder, IAgileNamedUserGivenUserDriver>
{
    public AgileNamedUserGivenUserBuilder(IAgileNamedUserGivenUserDriver driver) : base(driver) { }

    public AgileNamedUserGivenUserBuilder WithName(String name) => AddAction(async () => await Task.Run(() => Driver.WithName(name)));
    public AgileNamedUserGivenUserBuilder WithAgility(Int32 agility) => AddAction(async () => await Task.Run(() => Driver.WithAgility(agility)));
}

public class AgileNamedUserGivenBuilder
{
    public AgileNamedUserGivenUserBuilder User { get; }

    public AgileNamedUserGivenBuilder(IAgileNamedUserGivenDriver driver)
    {
        this.User = new AgileNamedUserGivenUserBuilder(driver.User);
    }
}

public class AgileNamedUserWhenUserBuilder : DriverSequenceBuilderBase<AgileNamedUserWhenUserBuilder, IAgileNamedUserWhenUserDriver>
{
    public AgileNamedUserWhenUserBuilder(IAgileNamedUserWhenUserDriver driver) : base(driver) { }

    public AgileNamedUserWhenUserBuilder IsGreeted() => AddAction(async () => await Task.Run(() => Driver.IsGreeted()));
    public AgileNamedUserWhenUserBuilder Jumps() => AddAction(async () => await Task.Run(() => Driver.Jumps()));
    public AgileNamedUserWhenUserBuilder Runs(UInt32 meters) => AddAction(async () => await Task.Run(() => Driver.Runs(meters)));
}

public class AgileNamedUserWhenBuilder
{
    public AgileNamedUserWhenUserBuilder User { get; }

    public AgileNamedUserWhenBuilder(IAgileNamedUserWhenDriver driver)
    {
        this.User = new AgileNamedUserWhenUserBuilder(driver.User);
    }
}

public class AgileNamedUserThenUserBuilder : DriverSequenceBuilderBase<AgileNamedUserThenUserBuilder, IAgileNamedUserThenUserDriver>
{
    public AgileNamedUserThenUserBuilder(IAgileNamedUserThenUserDriver driver) : base(driver) { }

    public AgileNamedUserThenUserBuilder Hears(String greeting) => AddAction(async () => await Task.Run(() => Driver.Hears(greeting)));
    public AgileNamedUserThenUserBuilder Jumped(UInt32 meters) => AddAction(async () => await Task.Run(() => Driver.Jumped(meters)));
}

public class AgileNamedUserThenBuilder
{
    public AgileNamedUserThenUserBuilder User { get; }

    public AgileNamedUserThenBuilder(IAgileNamedUserThenDriver driver)
    {
        this.User = new AgileNamedUserThenUserBuilder(driver.User);
    }
}

public partial class AgileNamedUserDsl : Dsl<AgileNamedUserGivenBuilder, AgileNamedUserWhenBuilder, AgileNamedUserThenBuilder>
{
    public AgileNamedUserDsl(IServiceProvider provider)
    {
        var givenDriver = DslTermProxyBuilder.Create<IAgileNamedUserGivenDriver>(nameof(Given), provider);
        var whenDriver = DslTermProxyBuilder.Create<IAgileNamedUserWhenDriver>(nameof(When), provider);
        var thenDriver = DslTermProxyBuilder.Create<IAgileNamedUserThenDriver>(nameof(Then), provider);

        Given = new AgileNamedUserGivenBuilder(givenDriver);
        When = new AgileNamedUserWhenBuilder(whenDriver);
        Then = new AgileNamedUserThenBuilder(thenDriver);
    }
}

#nullable restore