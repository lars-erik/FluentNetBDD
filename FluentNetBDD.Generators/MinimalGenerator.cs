using FluentNetBDD.Generation;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Diagnostics;
using System.Linq;

namespace FluentNetBDD.Generators
{
    [Generator]
    public sealed class MinimalGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
//#if DEBUG
//            if (!Debugger.IsAttached) Debugger.Launch();
//#endif
            
            var classNames = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (n, _) => n is AttributeSyntax s && 
                                         s.Name is IdentifierNameSyntax i && 
                                         nameof(GenerateMarkerAttribute).Contains(i.Identifier.Text),
                    transform: (ctx, _) =>
                    {
                        var attr = (AttributeSyntax)ctx.Node;
                        var symbol = ctx.SemanticModel.GetSymbolInfo(attr).Symbol as IMethodSymbol;
                        return attr.ArgumentList != null && 
                               attr.ArgumentList.Arguments.Any() &&
                               symbol != null && 
                               symbol.ContainingType.Name == nameof(GenerateMarkerAttribute)
                            ? attr.ArgumentList.Arguments.Select(x => x.ToString()).ToArray()
                            : null;
                    })
                .Where(n => n != null && n.Length >= 1 && n[0] != null)
                .Select((n, _) => n)
                .Collect();

            context.RegisterSourceOutput(classNames, (spc, markers) =>
            {
                foreach(var marker in markers.Distinct(new FirstIndexComparer<string>()))
                {
                    var className = marker[0].Trim('"');
                    var value = marker.Length > 1 ? marker[1].Trim('"') : null;
                    value = value ?? "Hello world";
                    spc.AddSource($"{className}.g.cs", $"// <auto-generated/>\npublic class {className} {{ public override string ToString() {{ return \"{value}!\"; }} }}");
                }
            });
        }
    }
}